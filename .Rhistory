# Clear memory from previous runs
base::rm(list=base::ls(all=TRUE))
## @knitr LoadPackages
# Load the necessary packages.
base::require(base)
base::require(knitr)
base::require(markdown)
base::require(testit)
base::require(dplyr)
base::require(reshape2)
base::require(stringr)
base::require(stats)
base::require(ggplot2)
## @knitr DeclareGlobals
## @knitr LoadData
# loads basic NLSY97-religiosity data as defined in COAG-Colloquium-2014F repository
source("./Scripts/Data/dsL.R")
p <- ggplot2::ggplot(dsM,aes(x=year,y=attend))
p <- p + geom_line()
p <- p + geom_point()
p <- p + plotTheme
p
# Clear memory from previous runs
base::rm(list=base::ls(all=TRUE))
## @knitr LoadPackages
# Load the necessary packages.
base::require(base)
base::require(knitr)
base::require(markdown)
base::require(testit)
base::require(dplyr)
base::require(reshape2)
base::require(stringr)
base::require(stats)
base::require(ggplot2)
## @knitr DeclareGlobals
## @knitr LoadData
# loads basic NLSY97-religiosity data as defined in COAG-Colloquium-2014F repository
source("./Scripts/Data/dsL.R")
## @knitr loadTheme
baseSize <- 12
### <b>
plotTheme <- ggplot2::theme_bw() +
### </b>
ggplot2::theme_bw(base_size=baseSize)+
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize + 3)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size= baseSize - 2))+
ggplot2::theme(axis.title.x=ggplot2::element_text(colour="gray40", size = baseSize + 2, vjust=-.3))+
ggplot2::theme(axis.title.y=ggplot2::element_text(colour="gray40", size = baseSize + 2, vjust=1.3))+
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80"))+
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm"))
## @knitr dsM01
dsM <- dplyr::filter(dsL, id == 1) %>%
dplyr::select(id, year, attend, attendF)
dsM
## @knitr dsM02
dsM <- dplyr::filter(dsL, id %in% c(1,23)) %>%
dplyr::select(id, year, attend, attendF)
dsM
p <- ggplot2::ggplot(dsM,aes(x=year,y=attend))
p <- p + geom_line()
p <- p + geom_point()
p <- p + plotTheme
p
# Clear memory from previous runs
base::rm(list=base::ls(all=TRUE))
## @knitr LoadPackages
# Load the necessary packages.
base::require(base)
base::require(knitr)
base::require(markdown)
base::require(testit)
base::require(dplyr)
base::require(reshape2)
base::require(stringr)
base::require(stats)
base::require(ggplot2)
## @knitr DeclareGlobals
## @knitr LoadData
# loads basic NLSY97-religiosity data as defined in COAG-Colloquium-2014F repository
source("./Scripts/Data/dsL.R")
## @knitr loadTheme
baseSize <- 12
### <b>
plotTheme <- ggplot2::theme_bw() +
### </b>
ggplot2::theme_bw(base_size=baseSize)+
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize + 3)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size= baseSize - 2))+
ggplot2::theme(axis.title.x=ggplot2::element_text(colour="gray40", size = baseSize + 2, vjust=-.3))+
ggplot2::theme(axis.title.y=ggplot2::element_text(colour="gray40", size = baseSize + 2, vjust=1.3))+
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80"))+
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm"))
## @knitr dsM01
dsM <- dplyr::filter(dsL, id == 1) %>%
dplyr::select(id, year, attend, attendF)
dsM
# Clear memory from previous runs
base::rm(list=base::ls(all=TRUE))
## @knitr LoadPackages
# Load the necessary packages.
base::require(base)
base::require(knitr)
base::require(markdown)
base::require(testit)
base::require(dplyr)
base::require(reshape2)
base::require(stringr)
base::require(stats)
base::require(ggplot2)
## @knitr DeclareGlobals
## @knitr LoadData
# loads basic NLSY97-religiosity data as defined in COAG-Colloquium-2014F repository
source("./Scripts/Data/dsL.R")
## @knitr loadTheme
baseSize <- 12
### <b>
plotTheme <- ggplot2::theme_bw() +
### </b>
ggplot2::theme_bw(base_size=baseSize)+
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize + 3)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size= baseSize - 2))+
ggplot2::theme(axis.title.x=ggplot2::element_text(colour="gray40", size = baseSize + 2, vjust=-.3))+
ggplot2::theme(axis.title.y=ggplot2::element_text(colour="gray40", size = baseSize + 2, vjust=1.3))+
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80"))+
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm"))
## @knitr dsM01
dsM <- dplyr::filter(dsL, id == 1) %>%
dplyr::select(id, year, attend, attendF)
dsM
## @knitr dsM02
dsM <- dplyr::filter(dsL, id %in% c(1,23)) %>%
dplyr::select(id, year, attend, attendF)
dsM
## @knitr graphBasic
p <- ggplot2::ggplot(dsM,aes(x=year,y=attend))
p <- p + geom_line()
p <- p + geom_point()
p <- p + plotTheme
p
p <- ggplot2::ggplot(dsM,aes(x=year,y=attend))
p <- p + geom_line(aes(group=id))
p <- p + geom_point()
p <- p + plotTheme
p
dsM <- dplyr::filter(dsL, id == 1) %>%
dplyr::select(id, year, attend, attendF)
dsM
p <- ggplot2::ggplot(dsM,aes(x=year,y=attend))
p <- p + geom_line(aes(group=id))
p <- p + geom_point()
p <- p + plotTheme
p
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Reports/temp.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Reports/temp.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
#                       ,"html_document"
"ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Reports/temp.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
#                       ,"html_document"
"ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Reports/temp.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
#                       ,"html_document"
"ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Reports/temp.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
#                       ,"html_document"
"ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Reports/temp.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
#                       ,"html_document"
"ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Reports/temp.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
#                       ,"html_document"
"ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Reports/temp.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
#                       ,"html_document"
"ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
dsL <- readRDS("./Data/Derived/dsL.rds")
dsM <- dplyr::filter(dsL, id == 1) %>%
dplyr::select(id, year, attend, attendF)
dsM
p <- ggplot2::ggplot(dsM,aes(x=year,y=attend))
p <- p + geom_line() + geom_point() + plotTheme
p <- p + scale_x_continuous(limits=c(2000,2011),
breaks=c(2000:2011))
p <- p + scale_y_continuous(limits=c(1,8),
breaks=seq(1,8, by=1))
p <- p + labs(list(
title="How often did you attend worship last year?",
x="Year of observation", y="Church attendance"))
p
# Clear memory from previous runs
base::rm(list=base::ls(all=TRUE))
## @knitr LoadPackages
# Load the necessary packages.
# base::require(base)
# base::require(knitr)
# base::require(markdown)
# base::require(testit)
# base::require(dplyr)
# base::require(reshape2)
# base::require(stringr)
# base::require(stats)
# base::require(ggplot2)
## @knitr DeclareGlobals
## @knitr LoadData
# loads basic NLSY97-religiosity data as defined in COAG-Colloquium-2014F repository
dsL <- readRDS("./Data/Derived/dsL.rds")
## @knitr loadTheme
baseSize <- 12
### <b>
plotTheme <- ggplot2::theme_bw() +
### </b>
ggplot2::theme_bw(base_size=baseSize)+
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize + 3)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size= baseSize - 2))+
ggplot2::theme(axis.title.x=ggplot2::element_text(colour="gray40", size = baseSize + 2, vjust=-.3))+
ggplot2::theme(axis.title.y=ggplot2::element_text(colour="gray40", size = baseSize + 2, vjust=1.3))+
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80"))+
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm"))
## @knitr dsM01
dsM <- dplyr::filter(dsL, id == 1) %>%
dplyr::select(id, year, attend, attendF)
dsM
# Clear memory from previous runs
base::rm(list=base::ls(all=TRUE))
## @knitr LoadPackages
# Load the necessary packages.
base::require(base)
base::require(knitr)
base::require(markdown)
base::require(testit)
base::require(dplyr)
base::require(reshape2)
base::require(stringr)
base::require(stats)
base::require(ggplot2)
## @knitr DeclareGlobals
## @knitr LoadData
# loads basic NLSY97-religiosity data as defined in COAG-Colloquium-2014F repository
dsL <- readRDS("./Data/Derived/dsL.rds")
## @knitr loadTheme
baseSize <- 12
### <b>
plotTheme <- ggplot2::theme_bw() +
### </b>
ggplot2::theme_bw(base_size=baseSize)+
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize + 3)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size= baseSize - 2))+
ggplot2::theme(axis.title.x=ggplot2::element_text(colour="gray40", size = baseSize + 2, vjust=-.3))+
ggplot2::theme(axis.title.y=ggplot2::element_text(colour="gray40", size = baseSize + 2, vjust=1.3))+
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80"))+
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm"))
dsM <- dplyr::filter(dsL, id == 1) %>%
dplyr::select(id, year, attend, attendF)
dsM
