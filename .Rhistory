# BuildBar()
BuildBar(modelName="m2c_R1")
selectModels <- modelsFE
axisModels  <-F_row
# modelName<- "m0_F"
# Read in different RDS files and join them all together
pathDataDirectory <- file.path("./Reports/LCMsequence/models/datasets")
# filenamePattern <- ".+\\.rds" #All RDS files
filenamePattern <- "m.{1,}Info\\.rds" #All RDS files
retrievedFilenames <- list.files(path=pathDataDirectory, pattern=filenamePattern)
filePaths <- file.path(pathDataDirectory, retrievedFilenames)
dsInfo <- readRDS(filePaths[1])
for( i in 1:length(filePaths) ) {
# To debug, change the '6' to some number to isolate the problem: for( i in 2:6 ) {
# message("About to read", filePaths[i], "\\")
dsInfoSingle <- readRDS(filePaths[i])
dsInfo <- plyr::join(x=dsInfo, y=dsInfoSingle, by="Coefficient", type="left", match="all")
rm(dsInfoSingle)
}
## Composite lists of models
source("./Reports/LCMsequence/model-SPECIFY.R")
mOrderRow <- c(F_row, R1_row, R2_row, R3_row)
mOrderCol <- c(F_col, R1_col, R2_col, R3_col)
# selectModels <- mOrderRow
# axisModels  <- c(mOrderRow)
# take data produced by model estimation
dsWide <- dsInfo
ds <- reshape2::melt(dsWide, id.vars=c('Coefficient'))
ds <- plyr::rename(ds, replace=c( variable = "model"))
str(ds)
ds<- ds %>%
dplyr::filter(Coefficient %in% c( "BIC","AIC","deviance"))
# ds<- ds[!(ds$model %in% excludeModels),] # exclude models from dataset
ds<- ds[ (ds$model %in%  selectModels),] # include models into dataset
# ds$Highlight <- (ds$model==modelName)
ds$Coefficient <- factor(x=ds$Coefficient, levels=c("BIC","AIC","deviance"))
ds$pretty<- format(round(ds$value,2), nsmall = 1,big.mark = ",")
# possible pallets
# colorFit <- c("BIC"="blue", "AIC"="red", "deviance"="grey")
colorFit <- c("BIC"="#8da0cb", "AIC"="#fc8d62", "deviance"="#66c2a5") # Colorbrewer, 3 cat, qualit, colorblind and print friendly
# floor <- 1000 #Watchout when AIC is negative
floor <- min(ds$value, na.rm=T)
longestBar <- max(ds$value, na.rm=T)
barHeight <- abs(longestBar - floor)
ceiling <- longestBar + barHeight * .2 * sign(longestBar)  #Account for cases when AIC is negative
source("./Scripts/Graphs/AesDefine.R") # load custom theme (barFitTheme)
# g <- ggplot2::ggplot(ds, aes(x= reorder(model, value), y=value, fill= Coefficient, group=model)) +
#   geom_bar(stat="identity", position="identity", alpha=.3) + #Draws the distant skyscrapers
# #   geom_bar(data=ds[ds$Highlight, ], stat="identity", position="identity", alpha=.2) + #Draws the skyskraper that pops out.
#   scale_fill_manual(values=colorFit) +
#   scale_x_discrete(limits=axisModels) +
#   scale_y_continuous(label=scales::comma) +
#   coord_cartesian(ylim=c(floor, ceiling)) +
#   guides(fill=guide_legend(title=NULL)) +
#   barFitTheme +
#   labs(x=NULL, y="Misfit")
g <- ggplot2::ggplot(ds, aes(x= reorder(model, value), y=value, color= Coefficient, fill=Coefficient)) +
geom_bar(aes(fill=Coefficient),stat="identity", position="identity", alpha=.4) + #This line draw the distant skyscrapers
geom_bar(data=ds[ds$Highlight, ], stat="identity", position="identity", alpha=.8) + #This line draw the skyskraper that pops out.
scale_fill_manual(values=colorFit) +
scale_color_manual(values=colorFit) +
scale_x_discrete(limits=axisModels) +
scale_y_continuous(label=scales::comma) +
geom_text(aes(label=pretty), hjust=-.4, vjust=0, angle=90, position=position_dodge(width=.65)) +
coord_cartesian(ylim=c(floor, ceiling)) +
guides(fill=guide_legend(title=NULL), color=FALSE) +
barFitTheme2 +
labs(x=NULL, y="Misfit")
# g
g
BuildBar()
selectModels <- F_row
axisModels  <- selectModels
source("./Reports/LCMsequence/graph-FIT-CUSTOM.R")
g
selectModels <- F_col
axisModels  <- selectModels
source("./Reports/LCMsequence/graph-FIT-CUSTOM.R")
g
selectModels <- R1_row
axisModels  <- selectModels
source("./Reports/LCMsequence/graph-FIT-CUSTOM.R")
g
selectModels <- R1_col
axisModels  <- selectModels
source("./Reports/LCMsequence/graph-FIT-CUSTOM.R")
g
selectModels <- R2_row
axisModels  <- selectModels
source("./Reports/LCMsequence/graph-FIT-CUSTOM.R")
g
selectModels <- R2_col
axisModels  <- selectModels
source("./Reports/LCMsequence/graph-FIT-CUSTOM.R")
g
selectModels <- R3_row
axisModels  <- selectModels
source("./Reports/LCMsequence/graph-FIT-CUSTOM.R")
g
g
# modelName<- "m0_F"
# Read in different RDS files and join them all together
pathDataDirectory <- file.path("./Reports/LCMsequence/models/datasets")
# filenamePattern <- ".+\\.rds" #All RDS files
filenamePattern <- "m.{1,}Info\\.rds" #All RDS files
retrievedFilenames <- list.files(path=pathDataDirectory, pattern=filenamePattern)
filePaths <- file.path(pathDataDirectory, retrievedFilenames)
dsInfo <- readRDS(filePaths[1])
for( i in 1:length(filePaths) ) {
# To debug, change the '6' to some number to isolate the problem: for( i in 2:6 ) {
# message("About to read", filePaths[i], "\\")
dsInfoSingle <- readRDS(filePaths[i])
dsInfo <- plyr::join(x=dsInfo, y=dsInfoSingle, by="Coefficient", type="left", match="all")
rm(dsInfoSingle)
}
## Composite lists of models
source("./Reports/LCMsequence/model-SPECIFY.R")
mOrderRow <- c(F_row, R1_row, R2_row, R3_row)
mOrderCol <- c(F_col, R1_col, R2_col, R3_col)
# selectModels <- mOrderRow
# axisModels  <- c(mOrderRow)
# take data produced by model estimation
dsWide <- dsInfo
ds <- reshape2::melt(dsWide, id.vars=c('Coefficient'))
ds <- plyr::rename(ds, replace=c( variable = "model"))
str(ds)
ds<- ds %>%
dplyr::filter(Coefficient %in% c( "BIC","AIC","deviance"))
# ds<- ds[!(ds$model %in% excludeModels),] # exclude models from dataset
ds<- ds[ (ds$model %in%  selectModels),] # include models into dataset
# ds$Highlight <- (ds$model==modelName)
ds$Coefficient <- factor(x=ds$Coefficient, levels=c("BIC","AIC","deviance"))
ds$pretty<- format(round(ds$value,0), nsmall = 0,big.mark = ",")
# possible pallets
# colorFit <- c("BIC"="blue", "AIC"="red", "deviance"="grey")
colorFit <- c("BIC"="#8da0cb", "AIC"="#fc8d62", "deviance"="#66c2a5") # Colorbrewer, 3 cat, qualit, colorblind and print friendly
# floor <- 1000 #Watchout when AIC is negative
floor <- min(ds$value, na.rm=T)
longestBar <- max(ds$value, na.rm=T)
barHeight <- abs(longestBar - floor)
ceiling <- longestBar + barHeight * .2 * sign(longestBar)  #Account for cases when AIC is negative
source("./Scripts/Graphs/AesDefine.R") # load custom theme (barFitTheme)
# g <- ggplot2::ggplot(ds, aes(x= reorder(model, value), y=value, fill= Coefficient, group=model)) +
#   geom_bar(stat="identity", position="identity", alpha=.3) + #Draws the distant skyscrapers
# #   geom_bar(data=ds[ds$Highlight, ], stat="identity", position="identity", alpha=.2) + #Draws the skyskraper that pops out.
#   scale_fill_manual(values=colorFit) +
#   scale_x_discrete(limits=axisModels) +
#   scale_y_continuous(label=scales::comma) +
#   coord_cartesian(ylim=c(floor, ceiling)) +
#   guides(fill=guide_legend(title=NULL)) +
#   barFitTheme +
#   labs(x=NULL, y="Misfit")
g <- ggplot2::ggplot(ds, aes(x= reorder(model, value), y=value, color= Coefficient, fill=Coefficient)) +
geom_bar(aes(fill=Coefficient),stat="identity", position="identity", alpha=.4) + #This line draw the distant skyscrapers
geom_bar(data=ds[ds$Highlight, ], stat="identity", position="identity", alpha=.8) + #This line draw the skyskraper that pops out.
scale_fill_manual(values=colorFit) +
scale_color_manual(values=colorFit) +
scale_x_discrete(limits=axisModels) +
scale_y_continuous(label=scales::comma) +
geom_text(aes(label=pretty), hjust=-1.4, vjust=0, angle=90, position=position_dodge(width=.65)) +
coord_cartesian(ylim=c(floor, ceiling)) +
guides(fill=guide_legend(title=NULL), color=FALSE) +
barFitTheme2 +
labs(x=NULL, y="Misfit")
# g
g
#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!
rm(list=ls(all=TRUE))  #Clear the variables from previous runs.
############################
## @knitr LoadPackages
require(RODBC)
require(grid)
require(lattice)
require(dplyr)
require(ggplot2)
require(gridExtra)
require(lme4)
require(reshape2)
require(testit)
require(png)
############################
## @knitr LoadSources
source("./Reports/LCMsequence/graph-FERE.R") #Load the `BuildFERE()` function
source("./Reports/LCMsequence/graph-FIT.R") #Load the `BuildBar()` function
source("./Reports/LCMsequence/graph-PREDICT.R") #Load the `BuildLine()` function
############################
## @knitr DeclareGlobals
source("./Scripts/Graphs/AesDefine.R")
pathImageDirectory <- "./Reports/LCMsequence/models/formulas"
vpLayout <- function(rowIndex, columnIndex) { return( viewport(layout.pos.row=rowIndex, layout.pos.col=columnIndex) ) }
PullAppropriatePng <- function( modelName ) {
pathImage <- file.path(pathImageDirectory, paste0(modelName, ".png"))
p <- png::readPNG(pathImage)
return( p )
}
BuildMosaic <- function( modelName ) {
testit::assert(fact="The FERE object should be found in the appropriate list", modelName %in% names(lstModelOutcomes))
dsFERE <- lstModelOutcomes[modelName][[1]]
#     pEquations <- png::readPNG(pathImage) #Replace this line with the one below it (toggle the comments).
pEquations <- PullAppropriatePng(modelName=modelName)
gTile <- BuildFERE(modelName=modelName, dsWide=dsFERE)
gLine <- BuildLine(modelName=modelName)
gBar <- BuildBar(modelName=modelName)
grid.newpage()
#Defnie the relative proportions among the panels in the mosaic.
layout <- grid.layout(nrow=3, ncol=2,
widths=unit(c(.4, .6) ,c("null", "null")),
heights=unit(c(.3,.2,.5), c("null", "null", "null"))
)
pushViewport(viewport(layout=layout))
grid.raster(pEquations, vp=viewport(layout.pos.row=1))
print(gTile, vp=viewport(layout.pos.row=2))
print(gLine, vp=vpLayout(3, 1))
print(gBar, vp=vpLayout(3, 2))
popViewport(0)
}
## @knitr LoadData
dsL<-readRDS("./Data/Derived/dsL.rds")
source("./Reports/LCMsequence/model-SPECIFY.R")
# source("./Reports/LCMsequence/model-ESTIMATE.R") # run only first time
# source("./Reports/LCMsequence/model-COLLECT.SOLUTIONS.R") # run only first time
lstModelOutcomes <- readRDS("./Reports/LCMsequence/models/datasets/ListOfModelOutcomes.rds")
# names(lstModelOutcomes)
columnNamesWidePretty <- c("Estimate", "Std.Error", "t.value", "SD", "tau0", "tau1", "tau2", "tau3", "sigma")
BuildMosaic(modelName="m0_F")
rm(list=ls(all=TRUE))  #Clear the variables from previous runs.
# This file collects instructions for implementing model sequencing with R and R studio
# Install the packages that will be used
# some interaction may be required, click to continue
# source ("./Scripts/Utility/InstallPackages.R")
# Load the model specification
source("./Reports/LCMsequence/model-SPECIFY.R")
# Estimate each model
# Process and organize model results
# Save results as a series of .Rds data objects
# source("./Reports/LCMsequence/model-ESTIMATE.R")
# a <- readRDS('./Reports/LCMsequence/models/datasets/m2_F_FERE.rds')
# Input all objects with model solutions
# combine into a single dataset ListOfModelOutcomes.rds
source("./Reports/LCMsequence/model-COLLECT-SOLUTIONS.R")
# modelNames
# lst_ds["m0_F"]
# lst_ds["m1_F"]
# lst_ds["m2_F"]
# Load functions that produce individual graphs
source("./Reports/LCMsequence/graph-FERE.R") #Load the `BuildFERE()` function
source("./Reports/LCMsequence/graph-FIT.R") #Load the `BuildBar()` function
source("./Reports/LCMsequence/graph-PREDICT.R") #Load the `BuildLine()` function
# BuildFERE("m2a_F",lst_ds["m2c_R3"][[1]])
BuildLine(modelName="m0a_F")
lst_ds["m0a_F"]
BuildLine("m0a_R1")
BuildLine("m0a_F")
---
title: "Model sequence report"
output:
html_document:
css: ~/GitHub/COAG-Colloquium-2014F/Reports/LCMsequence/libs/sidebar.css
fig.retina: 2
fig_width: 8
toc: yes
keep_md: false
md_document:
toc: yes
toc_depth: 3
pdf_document:
fig_crop: no
fig_width: 8
highlight: haddock
latex_engine: xelatex
number_sections: yes
toc: yes
toc_depth: 3
mainfont: Calibri
---
<!--  Set the working directory to the repository's base directory; this assumes the report is nested inside of only one directory.-->
```{r, echo=F, message=F}
require(knitr)
opts_knit$set(root.dir='../../')  #Don't combine this call with any other chunk -especially one that uses file paths.
```
```{r set_options, echo=F, message=F}
require(knitr)
# getwd()
opts_chunk$set(
results='show',
message = TRUE,
comment = NA,
tidy = FALSE,
fig.height = 12,
fig.width = 14,
#   out.width = NULL,
fig.path = 'sequence/',
warning = FALSE,
#   ,dev = "png"
dpi = 70
)
echoChunks <- FALSE
warningChunks<- FALSE
messageChunks<- FALSE
evalChunks <- TRUE
options(width=120) #So the output is 50% wider than the default.
read_chunk("./Reports/LCMsequence/sequence.R") # the file to which knitr calls for the chunks
```
```{r LoadPackages, echo=echoChunks, message=F}
```
```{r LoadSources, echo=echoChunks, message=F}
```
```{r DeclareGlobals, echo=echoChunks, message=FALSE}
```
```{r LoadData, echo=echoChunks, message=T}
# select only respondence in the cross-sectional sample
```
# Overview
There are total of 29 distinct models, which can be organized into 4 groups:
+ models with fixed effects only  (F):  9
+ models with      1 random term  (R1): 9
+ models with      2 random terms (R2): 7
+ models with      3 random temrs (R3): 4
The following layout helps understand how each of the model group was constructed. The columns count the number of terms  on the first level, while the rows indicate what predictors are added to the second level. Replace the stars in the name of the model with **F** for models with only the fixed effects  and **R1**, **R2**, and **R3**  for models with the corresponding number of random terms in the second level.
<img src = 'models/formulas/grid_map.png' width="50%"></img> </br>
For example, all models in group F are as follows.
<img src = 'models/formulas/grid_F.png' width="100%"></img>  </br>
For maps of R1, R2, and R3 model groups see the bottom of the report.
# Models with 1 random terms
<img src = 'models/formulas/grid_R1.png'  width="100%"></img>
# Models with 1 random terms
<img src = 'models/formulas/grid_R1.png'  width="90%"></img>
# Models with 1 random terms
<img src = 'models/formulas/grid_R1.png'  width="80%"></img>
# Models with 1 random terms
<img src = 'models/formulas/grid_R1.png'  width="70%"></img>
# F-group : fixed effects
## m0_F
```{r m0_F, echo=echoChunks, warning=warningChunks, message=messageChunks, eval=evalChunks, fig.height= 9.0}
```
## m1_F
```{r m1_F, echo=echoChunks, warning=warningChunks, message=messageChunks, eval=evalChunks, fig.height= 9.2}
```
## m2_F
```{r m2_F, echo=echoChunks, warning=warningChunks, message=messageChunks, eval=evalChunks, fig.height= 9.4}
```
## m0a_F
```{r m0a_F, echo=echoChunks, warning=warningChunks, message=messageChunks, eval=evalChunks, fig.height= 9.6}
```
## m0a_F
```{r m0a_F, echo=echoChunks, warning=warningChunks, message=messageChunks, eval=evalChunks, fig.height= 9.8}
```
## m0a_F
```{r m0a_F, echo=echoChunks, warning=warningChunks, message=messageChunks, eval=evalChunks, fig.height= 10}
```
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Reports/sequenceTemp.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
#                       ,"html_document"
"ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Reports/Temp.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
#                       ,"html_document"
"ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./Reports/Temp.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
#                       ,"html_document"
"ioslides_presentation"
),
clean=TRUE)
}
# To generate the static website from the htmls that have been printed in the code above
# 1) Select the "gh-pages" branch of your project's repository in GitHub client
# 2) Open command line terminal and change directory to the root folder of your repository that you've cloned onto your hard drive using GitHub client (type "cmd" in the address line of the File Explorer opened on root folder of your repository's clone)
# 3) type "bundle install" to install Bundler if you're creating the website for the first time
# 4) type "bundle exec jekyll serve" to build site and serve to localhost:4000
dsM <- dplyr::filter(dsL, id <= 300) %>%
dplyr::filter(ave((!is.na(attend)), id, FUN = all)) %>%
dplyr::mutate(time=year-2000) %>%
dplyr::select(id, time, attend)
### <b>
model <- nlme::gls(attend ~ 1 + time, data=dsM)
dsM$model <- predict(model)
### </b>
dplyr::filter(dsM,id==1)
## @knitr graph21
source("./Scripts/Graphs/basicTrajectory300.R")
p <- p + geom_line(aes(y=model), color="blue4", linetype="solid", size=1.7, alpha=.5)
p
<!--  Set the working directory to the repository's base directory; this assumes the report is nested inside of only one directory.-->
```{r, echo=F, message=F}
library(knitr)
opts_knit$set(root.dir='../')  #Don't combine this call with any other chunk -especially one that uses file paths.
```
<!-- Set the report-wide options, and point to the external script file. -->
```{r, echo=F, message=T}
require(knitr)
opts_chunk$set(
results='show',
message = TRUE,
comment = NA,
tidy = FALSE,
#   fig.height = 4.8,
#   fig.width = 6.5,
out.width = NULL,
fig.path = 'figure_rmd_try/',
dev = "png",
dpi = 70
)
echoChunks <- FALSE
warningChunks<- FALSE
messageChunks<- FALSE
outwidthChunks <- "90%"
options(width=120) #So the output is 50% wider than the default.
read_chunk("./Reports/2014-12-02-Dynamic-Reporting.R") # the file to which knitr calls for the chunks
```
## Load Data {.smaller}
```{r LoadPackages, echo=F, warning=F, message=F, results='hide'}
```
```{r LoadData, echo=T, warning=F, message=F, results='hide'}
```
```{r loadTheme, out.width="95%", warning=F, echo=FALSE, results='hide'}
```
<!--
Photoshop image settings:
Use the following dimensions:
For slides WITH title and image at 100%
1280 x 900  -  wide: cuts off         tall: bottom bleeds
1280 x 720  -  wide: bottom bleeds    tall: bottom 4 lines  SELECTED
1280 x 680  -  wide: bottom 1 line    tall: bottom 5 lines
1280 x 650  -  wide: bottom 2 lines   tall: bottom 6 lines
-->
## Data Origin
<img src = 'images/ai/DataMap_full.png' width="100%"></img>
```p
"./Scripts/Data/dsL.R"
```
download the files to work along at [GitHub](https://github.com/IALSA/COAG-colloquium-2014F)
<div class="notes">
This data flow map shows one possible scenario of data development, relevant to the data at hand. Stage <code>dsW</code>,  <code>dsLong</code>, might be optional, or narrate different transformations. The purpose of such a map is to organize our understanding of the script underlying this map. Thus, when results of the study are reported this map can be used to ease the deconstruction of the script and its further adaptation.
</div>
## Load Data {.smaller}
```{r LoadPackages, echo=F, warning=F, message=F, results='hide'}
```
```{r LoadData, echo=T, warning=F, message=F, results='hide'}
```
```{r}
str(dsL)
```
<div class="notes">
first we load the data set that we have annotated in the previous lectures
</div>
```{r loadTheme, out.width="95%", warning=F, echo=F}
```
## Focal outcome {.smaller}
<div class="columns-2">
```{r dsM00}
```
</br> </br>
How often did you **attend** a worhsip service during the last year?
```{r, echo=F}
attendLevels<- c(1:8)
attendLabels<-c( "Never",
"Once or Twice",
"Less than once/month",
"About once/month",
"About twice/month",
"About once/week",
"Several times/week",
"Everyday")
attendMetrics <- data.frame(attendLevels, attendLabels)
dplyr::arrange(attendMetrics,-attendLevels)
```
</div>
</br> </br>
