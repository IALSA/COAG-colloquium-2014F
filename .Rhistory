# theme(axis.ticks = element_line(colour="gray80")) +
theme(axis.ticks.length = grid::unit(0, "cm")) +
theme(legend.position=c(0,0), legend.justification=c(0,0)) +
# theme(legend.background = element_rect(fill = '#99999933')) +
theme(legend.background = element_rect(fill = NA)) +
theme(legend.text = element_text(colour = 'gray40'))
barTheme <- theme_bw() +
theme(axis.text = element_text(colour="gray40", size=15)) +
theme(axis.text.x = element_text(angle=0, vjust = .5)) +
theme(axis.title = element_text(colour="gray40")) +
theme(panel.border = element_rect(colour="gray80")) +
theme(panel.grid.major.x = element_blank()) +
# theme(axis.ticks = element_line(colour="gray80")) +
theme(axis.ticks.length = grid::unit(0, "cm")) +
theme(legend.position=c(.85,.8), legend.justification=c(0,0)) +
# theme(legend.background = element_rect(fill = '#99999933')) +
theme(legend.background = element_rect(fill = NA)) +
theme(legend.text = element_text(colour = 'gray40'))
}
{
#   g <- ggplot2::ggplot(ds, aes(x= reorder(model, value), y=value, fill= Coefficient, color= Coefficient, group=model)) +
#     geom_bar(stat="identity", position="identity", alpha=.5, color=NA) + #This line draw the distant skyscrapers
#     geom_bar(data=ds[ds$Highlight, ], stat="identity", position="identity", alpha=1) + #This line draw the skyskraper that pops out.
#     scale_fill_manual(values=colorFit) +
#     scale_color_manual(values=colorFit) +
#     scale_x_discrete(limits=mOrder1) +
#     scale_y_continuous(label=scales::comma) +
#     #Andrey:  almost never use `scale_zzzz()` to zoom.  It essentially deletes variables from the dataset, which can affect loess. p<- p + scale_y_continuous( limits = c(80000, 110000))
#     geom_text(aes(label=pretty), hjust=.1, vjust=-.7, angle=45, position=position_dodge(width=1)) +
#     coord_cartesian(ylim=c(floor, ceiling)) +
#     guides(fill=guide_legend(title=NULL), color=FALSE) +
#     barTheme +
#     labs(x=NULL, y="Misfit")
}
{
g <- ggplot2::ggplot(ds, aes(x= reorder(model, value), y=value, color= Coefficient, fill=Coefficient)) +
geom_bar(aes(fill=Coefficient),stat="identity", position="dodge", alpha=.5) + #This line draw the distant skyscrapers
geom_bar(data=ds[ds$Highlight, ], stat="identity", position="identity", alpha=.2) + #This line draw the skyskraper that pops out.
scale_fill_manual(values=colorFit) +
scale_color_manual(values=colorFit) +
scale_x_discrete(limits=axisModels) +
scale_y_continuous(label=scales::comma) +
#Andrey:  almost never use `scale_zzzz()` to zoom.  It essentially deletes variables from the dataset, which can affect loess. p<- p + scale_y_continuous( limits = c(80000, 110000))
geom_text(aes(label=pretty), hjust=.1, vjust=-.7, angle=45, position=position_dodge(width=1)) +
coord_cartesian(ylim=c(floor, ceiling)) +
guides(fill=guide_legend(title=NULL), color=FALSE) +
barTheme +
labs(x=NULL, y="Misfit")
}
return( g )
}
# BuildBar()
# BuildBar(modelName="m1_R2")
BuildBar(modelName="m1_R2")
BuildBar(modelName="m1_F")
# rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.
require(ggplot2)
require(dplyr)
require(reshape2)
BuildBar <- function( modelName = NA ) {
# Read in different REDS files and join them all together
pathDataDirectory <- file.path("./Reports/LCMsequence/models/datasets")
# filenamePattern <- ".+\\.rds" #All RDS files
filenamePattern <- "m.{1,}Info\\.rds" #All RDS files
retrievedFilenames <- list.files(path=pathDataDirectory, pattern=filenamePattern)
filePaths <- file.path(pathDataDirectory, retrievedFilenames)
dsInfo <- readRDS(filePaths[1])
for( i in 1:length(filePaths) ) {
# To debug, change the '6' to some number to isolate the problem: for( i in 2:6 ) {
# message("About to read", filePaths[i], "\\")
dsInfoSingle <- readRDS(filePaths[i])
dsInfo <- plyr::join(x=dsInfo, y=dsInfoSingle, by="Coefficient", type="left", match="all")
rm(dsInfoSingle)
}
## Elemental
mF<-   c("m0_F",  "m1_F")
mR1<-  c("m0_R1", "m1_R1")
mR2<-  c("m1_R2")
## Composite lists of models
mOrder1 <- c(mF, mR1, mR2)
excludeModels <- NA # c(mF, mFi)
axisModels  <- c(mOrder1)
######################################
dsWide <- dsInfo
ds <- reshape2::melt(dsWide, id.vars=c('Coefficient'))
ds <- plyr::rename(ds, replace=c( variable = "model"))
ds<- ds %>%
dplyr::filter(Coefficient %in% c( "BIC","AIC","deviance"))
ds<- ds[!(ds$model %in% excludeModels),] # exclude models from dataset
ds$Highlight <- (ds$model==modelName)
ds$Coefficient <- factor(x=ds$Coefficient, levels=c("BIC"="BIC","AIC"="AIC","deviance"="deviance"))
ds$pretty<- format(round(ds$value,0), nsmall = 0,big.mark = ",")
#   ds<- ds %>% dplyr::filter(Coefficient=="deviance")  # collapses all indices into 1
#   # comparing numeric values of fit indices.
#   aic<- as.numeric(as.vector(as.matrix(dsWide[dsWide$Coefficient=="AIC",])))
#   bic<- as.numeric(as.vector(as.matrix(dsWide[dsWide$Coefficient=="BIC",])))
#   dev<- as.numeric(as.vector(as.matrix(dsWide[dsWide$Coefficient=="deviance",])))
# possible pallets
# colorFit <- c("BIC"="#8da0cb", "AIC"="#fc8d62", "deviance"="#66c2a5")
#   colorFit <- c("BIC"="plum", "AIC"="goldenrod", "deviance"="lavender")
# colorFit <- c("BIC"="blue", "AIC"="tomato", "deviance"="yellow")
# colorFit <- c("BIC"="blue", "AIC"="red", "deviance"="grey")
#66c2a5
colorFit <- c("BIC"="#8da0cb", "AIC"="#fc8d62", "deviance"="#66c2a5") # Colorbrewer, 3 cat, qualit, colorblind and print friendly
# colorFit <- c("BIC"="#bebada", "AIC"="#8dd3c7", "deviance"="#ffffb3")
# colorFit <- c("BIC"="#8da0cb", "AIC"="#d95f02", "deviance"="#b2df8a")
# floor <- 1000 #Watchout when AIC is negative
floor <- min(ds$value, na.rm=T)
longestBar <- max(ds$value, na.rm=T)
barHeight <- abs(longestBar - floor)
ceiling <- longestBar + barHeight * .2 * sign(longestBar)  #Account for cases when AIC is negative
## Old theme
{
#   barTheme <- theme_bw() +
#     theme(axis.text = element_text(colour="gray40")) +
#     theme(axis.text.x = element_text(angle=90, vjust = .5, size=10)) +
#     theme(axis.title = element_text(colour="gray40")) +
#     theme(panel.border = element_rect(colour="gray80")) +
#     theme(panel.grid.major.x = element_blank()) +
#     # theme(axis.ticks = element_line(colour="gray80")) +
#     theme(axis.ticks.length = grid::unit(0, "cm")) +
#     theme(legend.position=c(.85,.8), legend.justification=c(0,0)) +
#     # theme(legend.background = element_rect(fill = '#99999933')) +
#     theme(legend.background = element_rect(fill = NA)) +
#     theme(legend.text = element_text(colour = 'gray40'))
}
## New Theme
{
barTheme <- theme_bw() +
theme(axis.text = element_text(colour="gray40")) +
theme(axis.text.x = element_text(angle=90, vjust = .5)) +
theme(axis.title = element_text(colour="gray40")) +
theme(panel.border = element_rect(colour="gray80")) +
theme(panel.grid.major.x = element_blank()) +
# theme(axis.ticks = element_line(colour="gray80")) +
theme(axis.ticks.length = grid::unit(0, "cm")) +
theme(legend.position=c(0,0), legend.justification=c(0,0)) +
# theme(legend.background = element_rect(fill = '#99999933')) +
theme(legend.background = element_rect(fill = NA)) +
theme(legend.text = element_text(colour = 'gray40'))
barTheme <- theme_bw() +
theme(axis.text = element_text(colour="gray40", size=15)) +
theme(axis.text.x = element_text(angle=0, vjust = .5)) +
theme(axis.title = element_text(colour="gray40")) +
theme(panel.border = element_rect(colour="gray80")) +
theme(panel.grid.major.x = element_blank()) +
# theme(axis.ticks = element_line(colour="gray80")) +
theme(axis.ticks.length = grid::unit(0, "cm")) +
theme(legend.position=c(.85,.8), legend.justification=c(0,0)) +
# theme(legend.background = element_rect(fill = '#99999933')) +
theme(legend.background = element_rect(fill = NA)) +
theme(legend.text = element_text(colour = 'gray40'))
}
{
#   g <- ggplot2::ggplot(ds, aes(x= reorder(model, value), y=value, fill= Coefficient, color= Coefficient, group=model)) +
#     geom_bar(stat="identity", position="identity", alpha=.5, color=NA) + #This line draw the distant skyscrapers
#     geom_bar(data=ds[ds$Highlight, ], stat="identity", position="identity", alpha=1) + #This line draw the skyskraper that pops out.
#     scale_fill_manual(values=colorFit) +
#     scale_color_manual(values=colorFit) +
#     scale_x_discrete(limits=mOrder1) +
#     scale_y_continuous(label=scales::comma) +
#     #Andrey:  almost never use `scale_zzzz()` to zoom.  It essentially deletes variables from the dataset, which can affect loess. p<- p + scale_y_continuous( limits = c(80000, 110000))
#     geom_text(aes(label=pretty), hjust=.1, vjust=-.7, angle=45, position=position_dodge(width=1)) +
#     coord_cartesian(ylim=c(floor, ceiling)) +
#     guides(fill=guide_legend(title=NULL), color=FALSE) +
#     barTheme +
#     labs(x=NULL, y="Misfit")
}
{
g <- ggplot2::ggplot(ds, aes(x= reorder(model, value), y=value, color= Coefficient, fill=Coefficient)) +
geom_bar(aes(fill=Coefficient),stat="identity", position="dodge", alpha=.5) + #This line draw the distant skyscrapers
geom_bar(data=ds[ds$Highlight, ], stat="identity", position="identity", alpha=.3) + #This line draw the skyskraper that pops out.
scale_fill_manual(values=colorFit) +
scale_color_manual(values=colorFit) +
scale_x_discrete(limits=axisModels) +
scale_y_continuous(label=scales::comma) +
#Andrey:  almost never use `scale_zzzz()` to zoom.  It essentially deletes variables from the dataset, which can affect loess. p<- p + scale_y_continuous( limits = c(80000, 110000))
geom_text(aes(label=pretty), hjust=.1, vjust=-.7, angle=45, position=position_dodge(width=1)) +
coord_cartesian(ylim=c(floor, ceiling)) +
guides(fill=guide_legend(title=NULL), color=FALSE) +
barTheme +
labs(x=NULL, y="Misfit")
}
return( g )
}
# BuildBar()
# BuildBar(modelName="m1_F")
BuildBar(modelName="m1_F")
ds <- lst_ds["m0_F"][[1]]
#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!
rm(list=ls(all=TRUE))  #Clear the variables from previous runs.
############################
## @knitr LoadPackages
require(RODBC)
require(grid)
require(lattice)
require(dplyr)
require(ggplot2)
require(gridExtra)
require(lme4)
require(reshape2)
require(testit)
require(png)
############################
## @knitr LoadSources
source("./Reports/LCMsequence/graph-FERE.R") #Load the `BuildFERE()` function
source("./Reports/LCMsequence/graph-FIT.R") #Load the `BuildBar()` function
source("./Reports/LCMsequence/graph-PREDICT.R") #Load the `BuildLine()` function
############################
## @knitr DeclareGlobals
source("./Reports/LCMsequence/AesDefine.R")
pathImageDirectory <- "./Reports/LCMsequence/formula_images"
vpLayout <- function(rowIndex, columnIndex) { return( viewport(layout.pos.row=rowIndex, layout.pos.col=columnIndex) ) }
# PullAppropriatePng <- function( modelName ) {
#   pathImage <- file.path(pathImageDirectory, paste0(modelName, ".png"))
#   p <- png::readPNG(pathImage)
#   return( p )
# }
ds <- lst_ds["m0_F"][[1]]
dsL<-readRDS("./Data/Derived/dsL.rds")
source("./Reports/LCMsequence/model-SPECIFY.R")
# source("./Reports/LCMsequence/model-ESTIMATE.R") # run only first time
# source("./Reports/LCMsequence/model-COLLECT.SOLUTIONS.R") # run only first time
lstModelOutcomes <- readRDS("./Reports/LCMsequence/models/datasets/ListOfModelOutcomes.rds")
# names(lstModelOutcomes)
ds <- lst_ds["m0_F"][[1]]
lstModelOutcomes <- readRDS("./Reports/LCMsequence/models/datasets/ListOfModelOutcomes.rds")
lstModelOutcomes
lst_ds["m0_F"][[1]]
# cat("\014")
#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!
# rm(list=ls(all=TRUE))  #Clear the variables from previous runs.
############################
## @knitr LoadPackages
require(RODBC)
require(grid)
require(lattice)
require(dplyr)
require(ggplot2)
require(gridExtra)
require(lme4)
require(reshape2)
###################
# Read in different REDS files and join them all together
pathDataDirectory <- file.path("./Reports/LCMsequence/models/datasets")
# filenamePattern <- ".+\\.rds" #All RDS files
filenamePattern <- "m.{1,}Info\\.rds" #All RDS files
retrievedFilenames <- list.files(path=pathDataDirectory, pattern=filenamePattern)
filePaths <- file.path(pathDataDirectory, retrievedFilenames)
dsInfo <- readRDS(filePaths[1])
for( i in 1:length(filePaths) ) {
# To debug, change the '6' to some number to isolate the problem: for( i in 2:6 ) {
# message("About to read", filePaths[i], "\\")
dsInfoSingle <- readRDS(filePaths[i])
dsInfo <- plyr::join(x=dsInfo, y=dsInfoSingle, by="Coefficient", type="left", match="all")
rm(dsInfoSingle)
}
###################
# Read in different REDS files
pathDataDirectory <- file.path("./Reports/LCMsequence/models/datasets")
# filenamePattern <- ".+\\.rds" #All RDS files
filenamePattern <- "m.{1,}FERE\\.rds" #All RDS files
retrievedFilenames <- list.files(path=pathDataDirectory, pattern=filenamePattern)
# dsFERE <- readRDS(filePaths[1])
# requireFieldsEvenIfNA <- c("sdRE", "timec", "intVarRE", "timecVarRE", "timec2VarRE", "timec3VarRE")
lst_ds <- NULL
for( i in seq_along(retrievedFilenames) ) {
filePath <- filePaths <- file.path(pathDataDirectory, retrievedFilenames[i])
dsFERESingle <- readRDS(filePath)
dsFERESingle <- plyr::rename(dsFERESingle, replace=c("Value"="Estimate"), warn_missing=FALSE)
#TODO: convert this into a loop
if( !("sdRE" %in% colnames(dsFERESingle)) ) dsFERESingle$sdRE <- NA
if( !("timec" %in% colnames(dsFERESingle)) ) dsFERESingle$timec <- NA
if( !("intVarRE" %in% colnames(dsFERESingle)) ) dsFERESingle$intVarRE <- NA
if( !("timecVarRE" %in% colnames(dsFERESingle)) ) dsFERESingle$timecVarRE <- NA
if( !("timec2VarRE" %in% colnames(dsFERESingle)) ) dsFERESingle$timec2VarRE <- NA
if( !("timec3VarRE" %in% colnames(dsFERESingle)) ) dsFERESingle$timec3VarRE <- NA
#   for( requiredField in requireFieldsEvenIfNA ) {
#     if( !(requireField %in% colnames(dsFERESingle)) )
#       dsFERESingle[[requireField]] <- NA
#   }
lst_ds[[i]] <- dsFERESingle
rm(dsFERESingle)
}
#names(lst_ds) <- gsub(pattern="(.+)\\.rds", replacement="\\1", x=retrievedFilenames)
names(lst_ds) <- gsub(pattern="(.+)\\_FERE.rds", replacement="\\1", x=retrievedFilenames)
saveRDS(lst_ds, file="./Reports/LCMsequence/models/datasets/ListOfModelOutcomes.rds", compress="xz")
# lst_ds["m4R1_FERE"]
# modelNames
lst_ds["m0_F"][[1]]
dsL<-readRDS("./Data/Derived/dsL.rds")
source("./Reports/LCMsequence/model-SPECIFY.R")
# source("./Reports/LCMsequence/model-ESTIMATE.R") # run only first time
# source("./Reports/LCMsequence/model-COLLECT.SOLUTIONS.R") # run only first time
lstModelOutcomes <- readRDS("./Reports/LCMsequence/models/datasets/ListOfModelOutcomes.rds")
# names(lstModelOutcomes)
ds <- lstModelOutcomes["m0_F"][[1]]
ds
columnNamesWidePretty <- c("Estimate", "Std.Error", "t.value", "SD", "tau0", "tau1", "tau2", "tau3", "sigma")
ds <- lstModelOutcomes["m0_F"][[1]]
colnames(ds) <- columnNamesWidePretty
Model_Solution <- lstModelOutcomes["m0_F"][[1]]
colnames(Model_Solution) <- columnNamesWidePretty
## @knitr m0_F
Model_Solution
BuildMosaic(modelName="m0_F")
#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!
rm(list=ls(all=TRUE))  #Clear the variables from previous runs.
############################
## @knitr LoadPackages
require(RODBC)
require(grid)
require(lattice)
require(dplyr)
require(ggplot2)
require(gridExtra)
require(lme4)
require(reshape2)
require(testit)
require(png)
############################
## @knitr LoadSources
source("./Reports/LCMsequence/graph-FERE.R") #Load the `BuildFERE()` function
source("./Reports/LCMsequence/graph-FIT.R") #Load the `BuildBar()` function
source("./Reports/LCMsequence/graph-PREDICT.R") #Load the `BuildLine()` function
############################
## @knitr DeclareGlobals
source("./Reports/LCMsequence/AesDefine.R")
pathImageDirectory <- "./Reports/LCMsequence/formula_images"
vpLayout <- function(rowIndex, columnIndex) { return( viewport(layout.pos.row=rowIndex, layout.pos.col=columnIndex) ) }
# PullAppropriatePng <- function( modelName ) {
#   pathImage <- file.path(pathImageDirectory, paste0(modelName, ".png"))
#   p <- png::readPNG(pathImage)
#   return( p )
# }
ds <- lst_ds["m0_F"][[1]]
BuildMosaic <- function( modelName ) {
testit::assert(fact="The FERE object should be found in the appropriate list", modelName %in% names(lstModelOutcomes))
dsFERE <- lstModelOutcomes[modelName][[1]]
#   pEquations <- png::readPNG(pathImage) #Replace this line with the one below it (toggle the comments).
#   pEquations <- PullAppropriatePng(modelName=modelName)
#   gTile <- BuildFERE(modelName=modelName, dsWide=dsFERE)
gLine <- BuildLine(modelName=modelName)
gBar <- BuildBar(modelName=modelName)
grid.newpage()
#Defnie the relative proportions among the panels in the mosaic.
layout <- grid.layout(nrow=2, ncol=2,
widths=unit(c(.6, .4) ,c("null", "null")),
heights=unit(c(.2, .5), c("null", "null", "null"))
)
pushViewport(viewport(layout=layout))
#   grid.raster(pEquations, vp=viewport(layout.pos.row=1))
print(gTile, vp=viewport(layout.pos.row=1))
print(gLine, vp=vpLayout(2, 1))
print(gBar, vp=vpLayout(2, 2))
popViewport(0)
}
## @knitr LoadData
dsL<-readRDS("./Data/Derived/dsL.rds")
source("./Reports/LCMsequence/model-SPECIFY.R")
# source("./Reports/LCMsequence/model-ESTIMATE.R") # run only first time
# source("./Reports/LCMsequence/model-COLLECT.SOLUTIONS.R") # run only first time
lstModelOutcomes <- readRDS("./Reports/LCMsequence/models/datasets/ListOfModelOutcomes.rds")
# names(lstModelOutcomes)
columnNamesWidePretty <- c("Estimate", "Std.Error", "t.value", "SD", "tau0", "tau1", "tau2", "tau3", "sigma")
## @knitr m0_F_FERE
Model_Solution <- lstModelOutcomes["m0_F"][[1]]
colnames(Model_Solution) <- columnNamesWidePretty
## @knitr m0_F
Model_Solution
BuildMosaic(modelName="m0_F")
#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!
rm(list=ls(all=TRUE))  #Clear the variables from previous runs.
############################
## @knitr LoadPackages
require(RODBC)
require(grid)
require(lattice)
require(dplyr)
require(ggplot2)
require(gridExtra)
require(lme4)
require(reshape2)
require(testit)
require(png)
############################
## @knitr LoadSources
source("./Reports/LCMsequence/graph-FERE.R") #Load the `BuildFERE()` function
source("./Reports/LCMsequence/graph-FIT.R") #Load the `BuildBar()` function
source("./Reports/LCMsequence/graph-PREDICT.R") #Load the `BuildLine()` function
############################
## @knitr DeclareGlobals
source("./Reports/LCMsequence/AesDefine.R")
pathImageDirectory <- "./Reports/LCMsequence/formula_images"
vpLayout <- function(rowIndex, columnIndex) { return( viewport(layout.pos.row=rowIndex, layout.pos.col=columnIndex) ) }
# PullAppropriatePng <- function( modelName ) {
#   pathImage <- file.path(pathImageDirectory, paste0(modelName, ".png"))
#   p <- png::readPNG(pathImage)
#   return( p )
# }
ds <- lst_ds["m0_F"][[1]]
BuildMosaic <- function( modelName ) {
testit::assert(fact="The FERE object should be found in the appropriate list", modelName %in% names(lstModelOutcomes))
dsFERE <- lstModelOutcomes[modelName][[1]]
#   pEquations <- png::readPNG(pathImage) #Replace this line with the one below it (toggle the comments).
#   pEquations <- PullAppropriatePng(modelName=modelName)
#   gTile <- BuildFERE(modelName=modelName, dsWide=dsFERE)
gLine <- BuildLine(modelName=modelName)
gBar <- BuildBar(modelName=modelName)
grid.newpage()
#Defnie the relative proportions among the panels in the mosaic.
layout <- grid.layout(nrow=1, ncol=2,
widths=unit(c(.6, .4) ,c("null", "null")),
heights=unit(c(.5), c("null", "null", "null"))
)
pushViewport(viewport(layout=layout))
#   grid.raster(pEquations, vp=viewport(layout.pos.row=1))
#   print(gTile, vp=viewport(layout.pos.row=1))
print(gLine, vp=vpLayout(1, 1))
print(gBar, vp=vpLayout(1, 2))
popViewport(0)
}
## @knitr LoadData
dsL<-readRDS("./Data/Derived/dsL.rds")
source("./Reports/LCMsequence/model-SPECIFY.R")
# source("./Reports/LCMsequence/model-ESTIMATE.R") # run only first time
# source("./Reports/LCMsequence/model-COLLECT.SOLUTIONS.R") # run only first time
lstModelOutcomes <- readRDS("./Reports/LCMsequence/models/datasets/ListOfModelOutcomes.rds")
# names(lstModelOutcomes)
columnNamesWidePretty <- c("Estimate", "Std.Error", "t.value", "SD", "tau0", "tau1", "tau2", "tau3", "sigma")
## @knitr m0_F_FERE
Model_Solution <- lstModelOutcomes["m0_F"][[1]]
colnames(Model_Solution) <- columnNamesWidePretty
## @knitr m0_F
Model_Solution
BuildMosaic(modelName="m0_F")
# rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.
modelName <- "m1_F"
require(ggplot2)
require(dplyr)
require(reshape2)
BuildFERE <- function( modelName, dsWide ) {
emptyTheme <- ggplot2::theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank()) +
theme(panel.grid = element_blank()) +
theme(panel.border = element_blank()) +
theme(axis.ticks.length = grid::unit(0, "cm"))
paletteColor <- c("0"=NA, "2"="#008000", "3"="tomato","99"=NA) #http://colrd.com/image-dna/23557/
paletteFill <- c("0"=NA, "1"="#5cbddd", "3"="tomato", "99"=NA)
borderCode <- c(
0,0,0,0,2,2,2,2,
0,0,0,0,2,2,2,2,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0
)
fillCode <- c(
1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
0,0,0,0,0,0,0,0,
3,3,3,3,0,0,0,0,
3,3,3,3,0,0,0,0,
3,3,3,3,0,0,0,0,
3,3,3,3,0,0,0,0,
3,3,3,3,0,0,0,0,
3,0,0,0,0,0,0,0
)
columnNamesWide <- c("Estimate", "Std.Error", "t.value", "sdRE", "intVarRE", "timecVarRE", "timec2VarRE", "timec3VarRE", "sigma")
columnNamesWidePretty <- c("Estimate", "Std.Error", "t.value", "SD", "tau0", "tau1", "tau2", "tau3", "sigma")
columnNamesWideWithCoefficient <- c("Coefficient", columnNamesWide)
dsWide2 <- dsWide[, columnNamesWideWithCoefficient]
# I will enforce this order, it's important
target <- c("(Intercept)", "timec", "TVC2", "TVC3", "X", "timec:X", "TVC2:X", "TVC3:X")
dsWide2<-dsWide2[match(target, dsWide2$Coefficient), ]
dsWide2[-1,"sigma"]<- NA # remove unnecessary values from sigma
ds <- melt(dsWide2, id.vars=("Coefficient"), value.name="value")
ds$label <- sprintf("% .2f", ds$value) #format(x=round(ds$value,2), trim=FALSE)
ds$label[is.na(ds$value)] <- ""
uniqueCoefficientCount <- 8
uniqueVariableCount <- length(unique(ds$variable))
ds$row <- rep(x=seq_len(uniqueCoefficientCount), times=uniqueVariableCount)
ds$col <- rep(x=seq_len(uniqueVariableCount), each=uniqueCoefficientCount)
dsHeaderColumn <- data.frame(label=columnNamesWidePretty, row=0, col=seq_len(uniqueVariableCount))
dsHeaderRow <- data.frame(label=target, row=seq_along(target), col=0)
ds <- plyr::rbind.fill(ds, dsHeaderColumn)
ds <- plyr::rbind.fill(ds, dsHeaderRow)
ds$borderCode <- factor(ifelse(!is.na(ds$value), borderCode, 99))
ds$fillCode <- factor(ifelse(!is.na(ds$value), fillCode, 99))
g <- ggplot(ds, aes(x=col,y=-row, label=label)) +
geom_tile(aes(color=borderCode, fill=fillCode), size=1.2) +
geom_text(na.rm=T, color="black", hjust=.5, vjust=.5, size=5, family="mono") +
scale_color_manual(values=paletteColor) +
scale_fill_manual(values=paletteFill) +
emptyTheme +
theme(legend.position="none") +
labs(x=NULL, y=NULL)
# ggsave(filename="./Models/LCM/graphs/equationTiles.png", plot=g)
return( g )
}
# BuildFERE("m0_F",lst_ds["m0_F"][[1]])
# BuildFERE("m1_F",lst_ds["m1_F"][[1]] )
# BuildFERE("m0_F",lst_ds["m0_R1"][[1]] )
# BuildFERE("m0_F",lst_ds["m1_R1"][[1]] )
# BuildFERE("m0_F",lst_ds["m1_R2"][[1]] )
BuildFERE("m1_F",lst_ds["m1_F"][[1]] )
source ("./Scripts/Utility/InstallPackages.R")
source("./Reports/LCMsequence/model-COLLECT-SOLUTIONS.R")
